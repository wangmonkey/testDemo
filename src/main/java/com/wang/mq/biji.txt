一个消息被多个消费者消费
订阅模式：  交换机  多个队列
    将一个消息发送个多个消费者
   解读：
    1、一个生产者，多个消费者。
    2、每一个消费者都有自己的队列
    3、生产者没有直接吧消息发送到队列 而是发送到交换机 转发器 exchange
    4、每个队列都要绑定到交换机上
    5、生产者发送的消息 经过交换机 到达队列 就能实现一个消息被多个消费者消费

    注意：交换机没有存储能力，只有队列有存储能力

消息应答与消息持久化
    boolean autoAck = false;
    channel.basicConsume(QUEUE_NAME,autoAck,consumer);
    boolean autoAck= true;(自动确认模式) 一旦RabbitMQ将消息发送给消费者，就会从内存中删除；
    这种情况下，如果杀死正在执行的消费者，就会丢失正在处理的消息
    boolean autoAck = false; （手动模式）如果一个消费者挂袋掉，就会交付给其他消费者
    rabbitMQ支持消息应答，消费者发送一个消息应答，告诉rabbitMQ这个消息已经处理完成，可以删除，然后MQ就会删除消息
    消息应答默认打开的是false


 持久化问题：
    channel.queueDeclare(QUEUE_NAME，durable,false,false,null);
    durable

    我们将程序中的boolean durable = false; 改成true;是不可以的，尽管代码是正确的
    他也不会运行成功！因为我们已经定义了一个叫test_work_queue 这个队列是未持久化，rabbitMQ不准许
    重新定义（不同参数）一个已存在的队列

转发器exchange （交换机、转发器）一方面是接收生产者的消息，另一方面是想队列推送消息
路由模式Rout

主题模式topic：
    将路由和某个模式匹配
    # 匹配多个
    * 匹配一个

rabbitMQ的消息确认机制（事务 + confirm）
确认消息到达消费者

事务两种方式： AMQP  confirm 模式

事务机制：
   txSelect：用户将当前channel设置成transition模式
   txCommit：提交事务
   txRollback：回滚事务
生产者端confirm模式实现：
        生产者将信道设置成confirm模式，一旦信道进入confirm模式，
    所有在该信道上面发布的消息都将会被指派一个唯一的ID(从1开始)，
    一旦消息被投递到所有匹配的队列之后，broker就会发送一个确认给生产者(包含消息的唯一ID)，
    这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，
    那么确认消息会在将消息写入磁盘之后发出，
    broker回传给生产者的确认消息中delivery-tag域包含了确认消息的序列号，
    此外broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理；
    confirm模式最大的好处在于他是异步的，一旦发布一条消息，
    生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，
    生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，
    就会发送一条nack消息，生产者应用程序同样可以在回调方法中处理该nack消息；


    spring 集成MQ：

大数据日志搜集 消息中间件
消息中间件在搜索系统DIH应用




